#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 04, 2021 01:14:34 AM IST  platform: Windows NT
import sys
import re
import psycopg2 as pg
c = pg.connect(host="localhost", database="covidtrack", user="postgres", password="abi_postgres")
rs = c.cursor()
q = 'create table if not exists phramacompMaster(compName varchar,CompID varchar,address varchar,city varchar,state varchar,pincode varchar,country varchar ,emailid varchar, phone varchar)'
rs.execute(q)
print("table created")

import matplotlib as mat

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
import tkinter.messagebox as ms
import Phramacompanymasterpage_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    Phramacompanymasterpage_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    Phramacompanymasterpage_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def clear(self):
        # clear the content of text entry box
        self.txtphone.delete(0, 'end')
        self.txtpincode.delete(0, 'end')
        self.txtcountry.delete(0, 'end')
        self.txtstate.delete(0, 'end')
        self.txtaddress.delete(0, 'end')
        self.txtcity.delete(0, 'end')
        self.txtemail.delete(0, 'end')
        self.txtCompname.delete(0, 'end')
        self.txtcompid.delete(0, 'end')

    def saveoff(self):
        self.Save["state"] = "disabled"
    def saveon(self):
        self.Save["state"] = "normal"

    def checkphone(self,phone1):
        #p=int(phone1.get())
        print("inside checkphone1",phone1)
        '''var1=self.txtphone.get()
        print("inside checkphone2")'''

        phLen = len(phone1)
        print(phLen)
        if (phLen == 14):
            print(phone1)
            p1 = phone1[0]  # +
            p2 = phone1[1:3]  # '91'
            p3 = phone1[3]  # '' or '-'
            p4 = phone1[4:14]  # num
            print(p1,':',p2,':',p3,':',p4)
            if (p1 == '+' and p2 == '91' and (p3 == ' ' or p3 == '-')and p4.isdigit()==True):
                 print("valid num")
                 self.errorlab.configure(text=" ")
                 return True
            else:
                 print("invalid-re enter")

                 self.errorlab.configure(text="enter valid phone number")
                 return False
                 # return phone
        elif (phLen == 13):
            print(phone1)
            p1 = phone1[0]  # +
            p2 = phone1[1:3]  # '91'
            p3 = phone1[1:13]  # num
            if ((p1 == '+') and (p2 == '91') and (p3.isdigit() == True)):
                print("valid num")

                self.errorlab.configure(text=" ")
                return True
            else:
                print("invalid-re enter")
                self.errorlab.configure(text="enter valid phone number")

                return False
        elif (phLen == 10):
            print(phone1)
            p1 = phone1[0:10]
            if (p1.isdigit() == True):
                print("valid num")

                self.errorlab.configure(text=" ")
                return True
            else:
                print("invalid-re enter")
                self.errorlab.configure(text="enter valid phone number")

                return False
        else:
            #print("enter valid number")
            self.errorlab.configure(text="enter valid phone number")

            return False

    '''def checkphone(self,index,p):
        print("inside checkphone")
        if(self.ph_rex.match(p)):
            print("Modification at index " + index)
            print("Valid phone num")
            self.saveon()
            return True
        else:
            print("InValid phone num")
            self.saveoff()
            return False'''

            #self.txtphone.delete(0 , 'end')
    def nullcompid(self,cid):
        #compid = input('enter company ID')
        if (len(cid) == 0):
            self.errorlab.configure(text="Company ID field is mandatory")
            return False
        else:

            return True

    def nullcountry(self,country):
        #compid = input('enter company ID')
        if (len(country) == 0):
            self.errorlab.configure(text="Country ID field is mandatory")
            return False
        else:

            return True

    def nulladdress(self,addr):
        #addr = input('enter company Address')
        if (len(addr)==0):
            self.errorlab.configure(text="address field is mandatory ")
            return False
        else:
            #self.saveon()
            return True

    def nullcity(self,city):
        #city = input('enter company City')
        if (len(city)==0):
            self.errorlab.configure(text="City field is mandatory ")
            return False
            #self.saveoff()
        else:
            #self.saveon()
            return True

    def nullstate(self,state):
        #state = input('enter company State')
        if (len(state)==0):
            self.errorlab.configure(text="State field is mandatory ")
            return False

            #self.saveoff()
        else:
           # self.saveon()
            return True

    def  nullcompname (self,cname):
        #state = input('enter company State')
        if (len(cname)==0):
            self.errorlab.configure(text="Compant name is mandatory ")
            return False
            #self.saveoff()
        else:
            #self.saveon()
            return True
    def validatePin(self,p):
        if(self.rexPinValue.match(p)):
            self.errorlab.configure(text=" ")
            return True

            #self.saveon()
        else:
            self.errorlab.configure(text="enter valid pincode")
            return False

            #ms.showerror("enter 6 digit")
            #self.saveoff()

        if(self.rexPinKey.match(p)):
            self.errorlab.configure(text=" ")
            return True
        else:
            #ms.showerror("enter numbers only")
            #self.errorlab.configure(text="enter valid pincode")
            return False


    def checkemail(self,email):
        #email = input("enter email-id")
        e = email.split('@')
        if (len(e) == 2):  # full email
            e1 = e[1].split('.')  # after @
            print("full email", len(e))
            print("after @", len(e1))
            if (len(e1) != 2 or len(e1[1]) > 3 or len(e[0]) == 0 or len(e[1]) < 3 or len(e[0]) > 64 or
                    len(email) > 255 or email.__contains__("..") or email.__contains__(".@") or email.__contains__("@.") or email.__contains__("._.")):
                print("invalid p2")
                self.errorlab.configure(text="emailID is invalid")
                #self.saveoff()
                return False
            else:
                print("valid email")
                self.errorlab.configure(text=" ")
                #self.saveon()
                return True
        else:
            print("invalid-email")
            self.errorlab.configure(text="emailID is invalid")
            #self.saveoff()
            return True

    def all_fun(self):

        n3=self.nullcompid(self)
        n4=self.nullcity(self)
        n5=self.nullcompname(self)
        n6=self.nullcountry(self)

        n2=self.nulladdress()
        e=self.checkemail()
        p = self.checkphone()
        n1 = self.nullstate()
        pin = self.validatePin()
        if (n2==True and n3==True and n4==True and n5==True and n6==True and e==True and p == True and n1 == True and pin == True):
            self.errorlab.configure(text=" ")

            self.saveon()
            return True
        else:
            self.errorlab.configure(text="all fields are mandatory")
            self.saveoff()
            return False

    def submit(self):

        var = self.all_fun()
        if (var == True):
            self.saveon()
            var = (self.txtCompname.get(),self.txtcompid.get(),self.txtaddress.get(),self.txtcity.get(),self.txtstate.get(),self.txtpincode.get(),self.txtcountry.get(),self.txtemail.get(),
               self.txtphone.get())
            q1 = """INSERT INTO phramacompmaster(compname,compID,address,city,state,pincode,country,emailid,phone) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)"""
            rs.execute(q1, var)
            ms.showinfo("inserted ", "inserted succeefully")

            c.commit()
            print("commited")
        else:
            self.saveoff()
            self.errorlab.configure(text="all fields are mandatory")


    def __init__(self, top=None):
        super().__init__()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1147x450+393+393")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1,  1)
        top.title("phrama company master")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.0, rely=0.031, height=26, width=252)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")

        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''CompanyName''')

        self.CompID = tk.Label(top)
        self.CompID.place(relx=-0.01, rely=0.131, height=45, width=273)
        self.CompID.configure(activebackground="#f9f9f9")
        self.CompID.configure(activeforeground="black")
        self.CompID.configure(background="#d9d9d9")
        self.CompID.configure(disabledforeground="#a3a3a3")
        self.CompID.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.CompID.configure(foreground="#000000")
        self.CompID.configure(highlightbackground="#d9d9d9")
        self.CompID.configure(highlightcolor="black")
        self.CompID.configure(text='''CompanyID''')

        self.txtCompname = tk.Entry(top)
        regcompname = (top.register(self.nullcompname), '%P')
        self.txtCompname = tk.Entry(top, validate="focusout", validatecommand=regcompname)
        self.txtCompname.place(relx=0.234, rely=0.04, height=44, relwidth=0.291)
        self.txtCompname.configure(background="white")
        self.txtCompname.configure(disabledforeground="#a3a3a3")
        self.txtCompname.configure(font="TkFixedFont")
        self.txtCompname.configure(foreground="#000000")
        self.txtCompname.configure(highlightbackground="#d9d9d9")
        self.txtCompname.configure(highlightcolor="black")
        self.txtCompname.configure(insertbackground="black")
        self.txtCompname.configure(selectbackground="blue")
        self.txtCompname.configure(selectforeground="white")

        self.txtcompid = tk.Entry(top)
        # self.emailv = re.compile('^[a-z0-9A-Z]+[\._]?[a-z0-9A-Z]+[@]\w+[.]\w{2,3}$')
        regcompid = (top.register(self.nullcompid), '%P')

        self.txtcompid = tk.Entry(top, validate="focusout", validatecommand=regcompid)

        self.txtcompid.place(relx=0.234, rely=0.16, height=44, relwidth=0.291)
        self.txtcompid.configure(background="white")
        self.txtcompid.configure(disabledforeground="#a3a3a3")
        self.txtcompid.configure(font="TkFixedFont")
        self.txtcompid.configure(foreground="#000000")
        self.txtcompid.configure(highlightbackground="#d9d9d9")
        self.txtcompid.configure(highlightcolor="black")
        self.txtcompid.configure(insertbackground="black")
        self.txtcompid.configure(selectbackground="blue")
        self.txtcompid.configure(selectforeground="white")


        self.Save = tk.Button(top)
        self.Save.place(relx=0.1, rely=0.889, height=33, width=126)
        self.Save.configure(activebackground="#ececec")
        self.Save.configure(activeforeground="#000000")
        self.Save.configure(background="#d9d9d9")
        self.Save.configure(disabledforeground="#a3a3a3")
        self.Save.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Save.configure(foreground="#000000")
        self.Save.configure(highlightbackground="#d9d9d9")
        self.Save.configure(highlightcolor="black")
        self.Save.configure(pady="0")
        self.Save.configure(text='''Save''' , command=self.submit)



        self.cancel = tk.Button(top)
        self.cancel.place(relx=0.432, rely=0.889, height=33, width=126)
        self.cancel.configure(activebackground="#ececec")
        self.cancel.configure(activeforeground="#000000")
        self.cancel.configure(background="#d9d9d9")
        self.cancel.configure(disabledforeground="#a3a3a3")
        self.cancel.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.cancel.configure(foreground="#000000")
        self.cancel.configure(highlightbackground="#d9d9d9")
        self.cancel.configure(highlightcolor="black")
        self.cancel.configure(pady="0")
        self.cancel.configure(text='''cancel''',command=self.clear)


        self.exit = tk.Button(top)
        self.exit.place(relx=0.703, rely=0.88, height=33, width=86)
        self.exit.configure(activebackground="#ececec")
        self.exit.configure(activeforeground="#000000")
        self.exit.configure(background="#d9d9d9")
        self.exit.configure(disabledforeground="#a3a3a3")
        self.exit.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.exit.configure(foreground="#000000")
        self.exit.configure(highlightbackground="#d9d9d9")
        self.exit.configure(highlightcolor="black")
        self.exit.configure(pady="0")
        self.exit.configure(text='''exit''',command=root.destroy)


        self.address = tk.Label(top)
        self.address.place(relx=0.021, rely=0.291, height=26, width=188)
        self.address.configure(background="#d9d9d9")
        self.address.configure(disabledforeground="#a3a3a3")
        self.address.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.address.configure(foreground="#000000")
        self.address.configure(text='''Address''')


        self.city = tk.Label(top)
        self.city.place(relx=0.068, rely=0.431, height=26, width=80)
        self.city.configure(background="#d9d9d9")
        self.city.configure(disabledforeground="#a3a3a3")
        self.city.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.city.configure(foreground="#000000")
        self.city.configure(text='''City''')

        self.state = tk.Label(top)
        self.state.place(relx=0.061, rely=0.6, height=26, width=114)
        self.state.configure(background="#d9d9d9")
        self.state.configure(disabledforeground="#a3a3a3")
        self.state.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.state.configure(foreground="#000000")
        self.state.configure(text='''State''')

        self.pincode = tk.Label(top)
        self.pincode.place(relx=0.542, rely=0.051, height=26, width=145)
        self.pincode.configure(background="#d9d9d9")
        self.pincode.configure(disabledforeground="#a3a3a3")
        self.pincode.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.pincode.configure(foreground="#000000")
        self.pincode.configure(text='''Pincode''')

        self.rexPinKey = re.compile("^\d{0,6}$")
        self.rexPinValue = re.compile("^\d{6}$")
        regPin = (top.register(self.validatePin), '%P')
        self.txtpincode = tk.Entry(top,validate="key",validatecommand=regPin)
        #self.txtpincode.pack(anchor=tk.W)
        self.txtpincode.place(relx=0.714, rely=0.051, height=44, relwidth=0.3)
        self.txtpincode.configure(background="white")
        self.txtpincode.configure(disabledforeground="#a3a3a3")
        self.txtpincode.configure(font="TkFixedFont")
        self.txtpincode.configure(foreground="#000000")
        self.txtpincode.configure(insertbackground="black")

        self.txtaddress = tk.Entry(top)
        regaddress = (top.register(self.nulladdress), '%P')
        self.txtaddress = tk.Entry(top, validate="focusout", validatecommand=regaddress)
        self.txtaddress.place(relx=0.234, rely=0.28, height=44, relwidth=0.291)
        self.txtaddress.configure(background="white")
        self.txtaddress.configure(disabledforeground="#a3a3a3")
        self.txtaddress.configure(font="TkFixedFont")
        self.txtaddress.configure(foreground="#000000")
        self.txtaddress.configure(insertbackground="black")

        self.txtcity = tk.Entry(top)
        regcity = (top.register(self.nullcity), '%P')
        self.txtcity = tk.Entry(top, validate="focusout", validatecommand=regcity)
        self.txtcity.place(relx=0.229, rely=0.44, height=44, relwidth=0.3)
        self.txtcity.configure(background="white")
        self.txtcity.configure(disabledforeground="#a3a3a3")
        self.txtcity.configure(font="TkFixedFont")
        self.txtcity.configure(foreground="#000000")
        self.txtcity.configure(insertbackground="black")

        self.txtstate = tk.Entry(top)
        regstate = (top.register(self.nullstate), '%P')
        self.txtstate = tk.Entry(top, validate="focusout", validatecommand=regstate)
        self.txtstate.place(relx=0.229, rely=0.609, height=44, relwidth=0.3)
        self.txtstate.configure(background="white")
        self.txtstate.configure(disabledforeground="#a3a3a3")
        self.txtstate.configure(font="TkFixedFont")
        self.txtstate.configure(foreground="#000000")
        self.txtstate.configure(insertbackground="black")

        self.txtcountry = tk.Entry(top)
        regcountry = (top.register(self.nullcountry), '%P')
        self.txtcountry = tk.Entry(top, validate="focusout", validatecommand=regcountry)
        self.txtcountry.place(relx=0.714, rely=0.16, height=44, relwidth=0.3)
        self.txtcountry.configure(background="white")
        self.txtcountry.configure(disabledforeground="#a3a3a3")
        self.txtcountry.configure(font="TkFixedFont")
        self.txtcountry.configure(foreground="#000000")
        self.txtcountry.configure(insertbackground="black")


        self.txtemail = tk.Entry(top)
        #self.emailv = re.compile('^[a-z0-9A-Z]+[\._]?[a-z0-9A-Z]+[@]\w+[.]\w{2,3}$')
        reg1 = (top.register(self.checkemail), '%P')
        self.txtemail = tk.Entry(top, validate="focusout",validatecommand=reg1)
        self.txtemail.place(relx=0.719, rely=0.291, height=44, relwidth=0.3)
        self.txtemail.configure(background="white")
        self.txtemail.configure(disabledforeground="#a3a3a3")
        self.txtemail.configure(font="TkFixedFont")
        self.txtemail.configure(foreground="#000000")
        self.txtemail.configure(insertbackground="black")


        #|^(\d{3,5}[\s|-]\d{8})$|^(\d{10})$|^([+91]{0,1})(\d{10})$")
        self.txtphone= tk.Entry(top)
        reg=(top.register(self.checkphone),'%P')
        self.txtphone=tk.Entry(top, validate='focusout', validatecommand=reg)
        '''self.ph_rex = re.compile(r'^[0-9]{1,10}$')
        ph_reg = (top.register(self.checkphone),'%i','%P')
        self.txtphone = tk.Entry(top,validate="all",validatecommand=ph_reg)'''
        self.txtphone.place(relx=0.714, rely=0.44, height=44, relwidth=0.291)
        self.txtphone.configure(background="white")
        self.txtphone.configure(disabledforeground="#a3a3a3")
        self.txtphone.configure(font="TkFixedFont")
        self.txtphone.configure(foreground="#000000")
        self.txtphone.configure(insertbackground="black")

        self.country = tk.Label(top)
        self.country.place(relx=0.552, rely=0.16, height=26, width=122)
        self.country.configure(background="#d9d9d9")
        self.country.configure(disabledforeground="#a3a3a3")
        self.country.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.country.configure(foreground="#000000")
        self.country.configure(text='''Country''')

        self.emailid = tk.Label(top)
        self.emailid.place(relx=0.551, rely=0.28, height=26, width=127)
        self.emailid.configure(background="#d9d9d9")
        self.emailid.configure(disabledforeground="#a3a3a3")
        self.emailid.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.emailid.configure(foreground="#000000")
        self.emailid.configure(text='''EmailID''')

        self.phone = tk.Label(top)
        self.phone.place(relx=0.556, rely=0.431, height=26, width=98)
        self.phone.configure(background="#d9d9d9")
        self.phone.configure(disabledforeground="#a3a3a3")
        self.phone.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.phone.configure(foreground="#000000")
        self.phone.configure(text='''Phone''')

        self.errorlab = tk.Label(top)
        self.errorlab.place(relx=0.556, rely=0.600, height=26, width=200)
        self.errorlab.configure(background="#d9d9d9")
        self.errorlab.configure(disabledforeground="#a3a3a3")
        self.errorlab.configure(font="-family {Segoe UI} -size 10")
        self.errorlab.configure(foreground="#000000")
        self.errorlab.configure(text=''' ''')


if __name__ == '__main__':

    vp_start_gui()
rs.close()
c.close()





