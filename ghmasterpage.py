#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Apr 01, 2021 09:18:57 PM IST  platform: Windows NT
import re
import psycopg2 as pg
c = pg.connect(host="localhost", database="covidtrack",user="postgres",password="abi_postgres")
rs=c.cursor()
q='create table if not exists  GHMaster(GHID varchar,GHName varchar,DocName varchar,DocID varchar,GHAddress varchar, ' \
  'districtorcity varchar, state varchar ,pinCode varchar,phone varchar,email varchar)'
rs.execute(q)
print("table created")

#import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ghmaster_support

def vp_start_gui():
        '''Starting point when module is the main routine.'''
        global val, w, root
        root = tk.Tk()
        ghmaster_support.set_Tk_var()
        top = Toplevel1 (root)
        ghmaster_support.init(root, top)
        root.mainloop()
        w = None
def create_Toplevel1(rt, *args, **kwargs):
        '''Starting point when module is imported by another module.
        Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
        global w, w_win, root
        #rt = root
        root = rt
        w = tk.Toplevel (root)
        ghmaster_support.set_Tk_var()
        top = Toplevel1 (w)
        ghmaster_support.init(w, top, *args, **kwargs)
        return (w, top)

def destroy_Toplevel1():
        global w
        w.destroy()
        w = None

class Toplevel1:
    def nullstate(self):
        #state = input('enter company State')
        global state
        state=self.regstate.get()
        if (len(state)==0):
            #self.txtpincode.configure(text="enter state",colour='white')

            self.txtpincode.configure(background='Red')
            self.saveoff()
            return False
        else:
            #self.saveon()
            return True

    def validatePin(self):
        global p
        p=self.regpin.get()
        if(self.rexPinValue.match(p)):
            #self.errorlab.configure(text=" ")
            self.txtpincode.configure({"background":'White'})

            self.saveoff()
            return True
        else:
            #self.txtpincode.configure(text="enter 6 digit pincode")

            self.txtpincode.configure(text="enter 6 digit only",background='Red')
            #ms.showerror("enter 6 digit")
            self.saveoff()
            return False


        if(self.rexPinKey.match(p)):
            self.errorlab.configure(text=" ")
            self.txtpincode.configure({"background":'White'})

            return True
        else:
            #self.txtpincode.configure(text="enter numbers only")
            self.txtpincode.configure(text="enter numbers only",background='Red')
            return False

    def checkphone(self,phone1):
        #global phone1
        #phone1=self.regphone.get()
        print(phone1)
        #p=int(phone1.get())
        print("inside checkphone1",phone1)

        phLen = len(phone1)
        print(phLen)
        if (phLen == 14):
            print(phone1)
            p1 = phone1[0]  # +
            p2 = phone1[1:3]  # '91'
            p3 = phone1[3]  # '' or '-'
            p4 = phone1[4:14]  # num
            print(p1,':',p2,':',p3,':',p4)
            if (p1 == '+' and p2 == '91' and (p3 == ' ' or p3 == '-')and p4.isdigit()==True):
                 print("valid num")
                 self.saveoff()
                 self.txtphone.configure({"background": 'White'})
                 return True
            else:
                 print("invalid-re enter")
                 self.saveoff()
                 self.txtphone.configure({"background": 'Red'})
                 return False
                 # return phone
        elif (phLen == 13):
            print(phone1)
            p1 = phone1[0]  # +
            p2 = phone1[1:3]  # '91'
            p3 = phone1[1:13]  # num
            if ((p1 == '+') and (p2 == '91') and (p3.isdigit() == True)):
                print("valid num")
                self.saveoff()
                self.txtphone.configure({"background": 'White'})
                return True
            else:
                print("invalid-re enter")
                self.txtphone.configure({"background": 'Red'})
                self.saveoff()
                return False
        elif (phLen == 10):
            print(phone1)
            p1 = phone1[0:10]
            if (p1.isdigit() == True):
                print("valid num")
                self.saveoff()
                self.txtphone.configure({"background": 'White'})
                return True
            else:
                print("invalid-re enter")
                self.txtphone.configure({"background": 'Red'})
                self.saveoff()
                return False
        else:
            #print("enter valid number")
            self.txtphone.configure({"background":'Red'})
            self.saveoff()
            return False
    def saveoff(self):
        self.save["state"] = "disabled"
    def saveon(self):
        self.save["state"] = "normal"
    def all_fun(self):
        p=self.checkphone(self.regphone)
        s=self.nullstate()
        pin=self.validatePin()
        if(p==True and s==True and pin==True):
            self.errorlab.configure(text=" ")

            self.saveon()
            return True
        else:
            self.errorlab.configure(text="all fields are mandatory")
            self.saveoff()
            return False

    def submit(self):
        var=self.all_fun()
        if(var==True):
            var = (self.txtstate.get(), self.txtpincode.get(),self.txtphone.get())
            self.errorlab.configure(text=" ")
            q1 = """INSERT INTO GHMaster(state,pinCode,phone) VALUES (%s,%s,%s)"""
            rs.execute(q1, var)
            print("inserted successfully")
            c.commit()
        else:
            self.errorlab.configure(text="all fields are mandatory")


    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1920x1001+0+26")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.GH_ID = tk.Label(top)
        self.GH_ID.place(relx=0.047, rely=0.16, height=56, width=233)
        self.GH_ID.configure(activebackground="#f9f9f9")
        self.GH_ID.configure(activeforeground="black")
        self.GH_ID.configure(background="#d9d9d9")
        self.GH_ID.configure(disabledforeground="#a3a3a3")
        self.GH_ID.configure(foreground="#000000")
        self.GH_ID.configure(highlightbackground="#d9d9d9")
        self.GH_ID.configure(highlightcolor="black")
        self.GH_ID.configure(text='''GH ID''')

        self.GHname = tk.Label(top)
        self.GHname.place(relx=0.042, rely=0.27, height=46, width=251)
        self.GHname.configure(activebackground="#f9f9f9")
        self.GHname.configure(activeforeground="black")
        self.GHname.configure(background="#d9d9d9")
        self.GHname.configure(disabledforeground="#a3a3a3")
        self.GHname.configure(foreground="#000000")
        self.GHname.configure(highlightbackground="#d9d9d9")
        self.GHname.configure(highlightcolor="black")
        self.GHname.configure(text='''GHName''')

        self.docname = tk.Label(top)
        self.docname.place(relx=0.042, rely=0.37, height=46, width=263)
        self.docname.configure(activebackground="#f9f9f9")
        self.docname.configure(activeforeground="black")
        self.docname.configure(background="#d9d9d9")
        self.docname.configure(disabledforeground="#a3a3a3")
        self.docname.configure(foreground="#000000")
        self.docname.configure(highlightbackground="#d9d9d9")
        self.docname.configure(highlightcolor="black")
        self.docname.configure(text='''Doctor Name''')

        self.docid = tk.Label(top)
        self.docid.place(relx=0.037, rely=0.5, height=36, width=273)
        self.docid.configure(activebackground="#f9f9f9")
        self.docid.configure(activeforeground="black")
        self.docid.configure(background="#d9d9d9")
        self.docid.configure(disabledforeground="#a3a3a3")
        self.docid.configure(foreground="#000000")
        self.docid.configure(highlightbackground="#d9d9d9")
        self.docid.configure(highlightcolor="black")
        self.docid.configure(text='''Doctor ID''')

        self.gh_address = tk.Label(top)
        self.gh_address.place(relx=0.036, rely=0.639, height=46, width=275)
        self.gh_address.configure(activebackground="#f9f9f9")
        self.gh_address.configure(activeforeground="black")
        self.gh_address.configure(background="#d9d9d9")
        self.gh_address.configure(disabledforeground="#a3a3a3")
        self.gh_address.configure(foreground="#000000")
        self.gh_address.configure(highlightbackground="#d9d9d9")
        self.gh_address.configure(highlightcolor="black")
        self.gh_address.configure(text='''GH Address''')

        self.Districtorcity = tk.Label(top)
        self.Districtorcity.place(relx=0.526, rely=0.17, height=36, width=261)
        self.Districtorcity.configure(activebackground="#f9f9f9")
        self.Districtorcity.configure(activeforeground="black")
        self.Districtorcity.configure(background="#d9d9d9")
        self.Districtorcity.configure(disabledforeground="#a3a3a3")
        self.Districtorcity.configure(foreground="#000000")
        self.Districtorcity.configure(highlightbackground="#d9d9d9")
        self.Districtorcity.configure(highlightcolor="black")
        self.Districtorcity.configure(text='''District/City''')

        self.state = tk.Label(top)
        self.state.place(relx=0.516, rely=0.25, height=46, width=303)
        self.state.configure(activebackground="#f9f9f9")
        self.state.configure(activeforeground="black")
        self.state.configure(background="#d9d9d9")
        self.state.configure(disabledforeground="#a3a3a3")
        self.state.configure(foreground="#000000")
        self.state.configure(highlightbackground="#d9d9d9")
        self.state.configure(highlightcolor="black")
        self.state.configure(text='''State''')

        self.pincode = tk.Label(top)
        self.pincode.place(relx=0.521, rely=0.37, height=46, width=302)
        self.pincode.configure(activebackground="#f9f9f9")
        self.pincode.configure(activeforeground="black")
        self.pincode.configure(background="#d9d9d9")
        self.pincode.configure(disabledforeground="#a3a3a3")
        self.pincode.configure(foreground="#000000")
        self.pincode.configure(highlightbackground="#d9d9d9")
        self.pincode.configure(highlightcolor="black")
        self.pincode.configure(text='''Pincode''')

        self.phone = tk.Label(top)
        self.phone.place(relx=0.536, rely=0.5, height=75, width=242)
        self.phone.configure(activebackground="#f9f9f9")
        self.phone.configure(activeforeground="black")
        self.phone.configure(background="#d9d9d9")
        self.phone.configure(disabledforeground="#a3a3a3")
        self.phone.configure(foreground="#000000")
        self.phone.configure(highlightbackground="#d9d9d9")
        self.phone.configure(highlightcolor="black")
        self.phone.configure(text='''Phone''')

        self.email = tk.Label(top)
        self.email.place(relx=0.526, rely=0.629, height=56, width=282)
        self.email.configure(activebackground="#f9f9f9")
        self.email.configure(activeforeground="black")
        self.email.configure(background="#d9d9d9")
        self.email.configure(disabledforeground="#a3a3a3")
        self.email.configure(foreground="#000000")
        self.email.configure(highlightbackground="#d9d9d9")
        self.email.configure(highlightcolor="black")
        self.email.configure(text='''Email''')

        self.txtghid = tk.Entry(top)
        self.txtghid.place(relx=0.219, rely=0.17, height=44, relwidth=0.21)
        self.txtghid.configure(background="white")
        self.txtghid.configure(disabledforeground="#a3a3a3")
        self.txtghid.configure(font="TkFixedFont")
        self.txtghid.configure(foreground="#000000")
        self.txtghid.configure(highlightbackground="#d9d9d9")
        self.txtghid.configure(highlightcolor="black")
        self.txtghid.configure(insertbackground="black")
        self.txtghid.configure(selectbackground="blue")
        self.txtghid.configure(selectforeground="white")

        self.txtghname = tk.Entry(top)
        self.txtghname.place(relx=0.219, rely=0.27, height=44, relwidth=0.205)
        self.txtghname.configure(background="white")
        self.txtghname.configure(disabledforeground="#a3a3a3")
        self.txtghname.configure(font="TkFixedFont")
        self.txtghname.configure(foreground="#000000")
        self.txtghname.configure(highlightbackground="#d9d9d9")
        self.txtghname.configure(highlightcolor="black")
        self.txtghname.configure(insertbackground="black")
        self.txtghname.configure(selectbackground="blue")
        self.txtghname.configure(selectforeground="white")

        self.txtdocname = tk.Entry(top)
        self.txtdocname.place(relx=0.219, rely=0.37, height=54, relwidth=0.205)
        self.txtdocname.configure(background="white")
        self.txtdocname.configure(disabledforeground="#a3a3a3")
        self.txtdocname.configure(font="TkFixedFont")
        self.txtdocname.configure(foreground="#000000")
        self.txtdocname.configure(highlightbackground="#d9d9d9")
        self.txtdocname.configure(highlightcolor="black")
        self.txtdocname.configure(insertbackground="black")
        self.txtdocname.configure(selectbackground="blue")
        self.txtdocname.configure(selectforeground="white")

        self.txtdocid = tk.Entry(top)
        self.txtdocid.place(relx=0.219, rely=0.49, height=54, relwidth=0.21)
        self.txtdocid.configure(background="white")
        self.txtdocid.configure(disabledforeground="#a3a3a3")
        self.txtdocid.configure(font="TkFixedFont")
        self.txtdocid.configure(foreground="#000000")
        self.txtdocid.configure(highlightbackground="#d9d9d9")
        self.txtdocid.configure(highlightcolor="black")
        self.txtdocid.configure(insertbackground="black")
        self.txtdocid.configure(selectbackground="blue")
        self.txtdocid.configure(selectforeground="white")

        self.txtghaddress = tk.Entry(top)
        self.txtghaddress.place(relx=0.219, rely=0.629, height=44
                , relwidth=0.216)
        self.txtghaddress.configure(background="white")
        self.txtghaddress.configure(disabledforeground="#a3a3a3")
        self.txtghaddress.configure(font="TkFixedFont")
        self.txtghaddress.configure(foreground="#000000")
        self.txtghaddress.configure(highlightbackground="#d9d9d9")
        self.txtghaddress.configure(highlightcolor="black")
        self.txtghaddress.configure(insertbackground="black")
        self.txtghaddress.configure(selectbackground="blue")
        self.txtghaddress.configure(selectforeground="white")

        self.txtdistrictorcity = tk.Entry(top)
        self.txtdistrictorcity.place(relx=0.745, rely=0.16, height=44
                , relwidth=0.169)
        self.txtdistrictorcity.configure(background="white")
        self.txtdistrictorcity.configure(disabledforeground="#a3a3a3")
        self.txtdistrictorcity.configure(font="TkFixedFont")
        self.txtdistrictorcity.configure(foreground="#000000")
        self.txtdistrictorcity.configure(highlightbackground="#d9d9d9")
        self.txtdistrictorcity.configure(highlightcolor="black")
        self.txtdistrictorcity.configure(insertbackground="black")
        self.txtdistrictorcity.configure(selectbackground="blue")
        self.txtdistrictorcity.configure(selectforeground="white")
        #self.txtdistrictorcity.configure(textvariable=ghmaster_support.txtdistrictorcity)

        self.regstate=self.txtstate = tk.Entry(top)

        self.txtstate = tk.Entry(top,validate="focusout",validatecommand=self.regstate)
        self.regstate.pack()
        self.txtstate.place(relx=0.745, rely=0.26, height=44, relwidth=0.174)
        self.txtstate.configure(background="white")
        self.txtstate.configure(disabledforeground="#a3a3a3")
        self.txtstate.configure(font="TkFixedFont")
        self.txtstate.configure(foreground="#000000")
        self.txtstate.configure(highlightbackground="#d9d9d9")
        self.txtstate.configure(highlightcolor="black")
        self.txtstate.configure(insertbackground="black")
        self.txtstate.configure(selectbackground="blue")
        self.txtstate.configure(selectforeground="white")
        #self.txtstate.configure(textvariable=ghmaster_support.txtstate)


        #self.txtpincode = tk.Entry(top)
        self.rexPinKey = re.compile("^\d{0,6}$")
        self.rexPinValue = re.compile("^\d{6}$")
        self.regpin=self.txtpincode = tk.Entry(top)

        self.txtpincode = tk.Entry(top,validate="key",validatecommand=self.regpin)
        self.regpin.pack()
        #self.txtCompname = tk.Entry(top, validate="focusout", validatecommand=regcompname)
        self.txtpincode.place(relx=0.745, rely=0.37, height=54, relwidth=0.174)
        self.txtpincode.configure(background="white")
        self.txtpincode.configure(disabledforeground="#a3a3a3")
        self.txtpincode.configure(font="TkFixedFont")
        self.txtpincode.configure(foreground="#000000")
        self.txtpincode.configure(highlightbackground="#d9d9d9")
        self.txtpincode.configure(highlightcolor="black")
        self.txtpincode.configure(insertbackground="black")
        self.txtpincode.configure(selectbackground="blue")
        self.txtpincode.configure(selectforeground="white")

        self.regphone=self.txtphone = tk.Entry(top)
        self.regphone.pack()
        self.txtphone = tk.Entry(top,validate="focusout",validatecommand=self.regphone)

        self.txtphone.place(relx=0.74, rely=0.5, height=44, relwidth=0.184)
        self.txtphone.configure(background="white")
        self.txtphone.configure(disabledforeground="#a3a3a3")
        self.txtphone.configure(font="TkFixedFont")
        self.txtphone.configure(foreground="#000000")
        self.txtphone.configure(highlightbackground="#d9d9d9")
        self.txtphone.configure(highlightcolor="black")
        self.txtphone.configure(insertbackground="black")
        self.txtphone.configure(selectbackground="blue")
        self.txtphone.configure(selectforeground="white")

        self.txtemail = tk.Entry(top)
        self.txtemail.place(relx=0.745, rely=0.619, height=54, relwidth=0.184)
        self.txtemail.configure(background="white")
        self.txtemail.configure(disabledforeground="#a3a3a3")
        self.txtemail.configure(font="TkFixedFont")
        self.txtemail.configure(foreground="#000000")
        self.txtemail.configure(highlightbackground="#d9d9d9")
        self.txtemail.configure(highlightcolor="black")
        self.txtemail.configure(insertbackground="black")
        self.txtemail.configure(selectbackground="blue")
        self.txtemail.configure(selectforeground="white")

        self.save = tk.Button(top)
        self.save.place(relx=0.177, rely=0.779, height=33, width=136)
        self.save.configure(activebackground="#ececec")
        self.save.configure(activeforeground="#000000")
        self.save.configure(background="#d9d9d9")
        self.save.configure(command=ghmaster_support.save)
        self.save.configure(disabledforeground="#a3a3a3")
        self.save.configure(foreground="#000000")
        self.save.configure(highlightbackground="#d9d9d9")
        self.save.configure(highlightcolor="black")
        self.save.configure(pady="0")
        #self.save.configure(text='''Save''')
        self.save.configure(text='''Save''', command=self.submit)

        self.Cancel = tk.Button(top)
        self.Cancel.place(relx=0.401, rely=0.769, height=43, width=106)
        self.Cancel.configure(activebackground="#ececec")
        self.Cancel.configure(activeforeground="#000000")
        self.Cancel.configure(background="#d9d9d9")
        self.Cancel.configure(disabledforeground="#a3a3a3")
        self.Cancel.configure(foreground="#000000")
        self.Cancel.configure(highlightbackground="#d9d9d9")
        self.Cancel.configure(highlightcolor="black")
        self.Cancel.configure(pady="0")
        self.Cancel.configure(text='''Cancel''')

        self.exit = tk.Button(top)
        self.exit.place(relx=0.563, rely=0.769, height=33, width=126)
        self.exit.configure(activebackground="#ececec")
        self.exit.configure(activeforeground="#000000")
        self.exit.configure(background="#d9d9d9")
        self.exit.configure(disabledforeground="#a3a3a3")
        self.exit.configure(foreground="#000000")
        self.exit.configure(highlightbackground="#d9d9d9")
        self.exit.configure(highlightcolor="black")
        self.exit.configure(pady="0")
        #self.exit.configure(text='''Exit''')
        self.exit.configure(text='''Exit''',command=root.destroy)


        self.next = tk.Button(top)
        self.next.place(relx=0.74, rely=0.769, height=33, width=146)
        self.next.configure(activebackground="#ececec")
        self.next.configure(activeforeground="#000000")
        self.next.configure(background="#d9d9d9")
        self.next.configure(disabledforeground="#a3a3a3")
        self.next.configure(foreground="#000000")
        self.next.configure(highlightbackground="#d9d9d9")
        self.next.configure(highlightcolor="black")
        self.next.configure(pady="0")
        self.next.configure(text='''Next''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.349, rely=0.03, height=66, width=542)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ff0000")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''GH DETAILS''')

        self.errorlab = tk.Label(top)
        self.errorlab.place(relx=0.556, rely=0.600, height=26, width=200)
        self.errorlab.configure(background="#d9d9d9")
        self.errorlab.configure(disabledforeground="#a3a3a3")
        self.errorlab.configure(font="-family {Segoe UI} -size 10")
        self.errorlab.configure(foreground="#000000")
        self.errorlab.configure(text=''' ''')
if __name__ == '__main__':
    vp_start_gui()
rs.close()
c.close()






